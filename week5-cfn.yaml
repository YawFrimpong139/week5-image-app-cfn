AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Extended CloudFormation template for ECS + Blue/Green + ECR + CodeDeploy pipeline
  with private S3 bucket (VPC Gateway Endpoint) and RDS PostgreSQL (db.t3) for the photo gallery lab.

Parameters:
  EnvironmentName:
    Type: String
    Default: week4-ecs-stack
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: CIDR block for public subnet 1
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet 2
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: CIDR block for private subnet 1
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: CIDR block for private subnet 2
  # GitHub repo and branch allowed to assume the OIDC role (format: owner/re
  AllowedGithubRepo:
    Type: String
    Default: YawFrimpong139/week5-image-app-cfn
  AllowedGithubBranch:
    Type: String
    Default: refs/heads/main
  AppPort:
    Type: Number
    Default: 80
  DeploymentZipFileName:
    Type: String
    Default: deployment-files.zip

  # DB credentials - keep db password NoEcho in production
  DBName:
    Type: String
    Default: mygallerydb
  DBUsername:
    Type: String
    Default: gallery_user
  DBEngine:
    Type: String
    Default: postgres
    Description: Database engine
  DBEngineVersion:
    Type: String
    Default: "14.17"
    Description: Database engine version
  AllocatedStorage:
    Type: Number
    Default: 20
    Description: Allocated storage in GB
  DBStorageType:
    Type: String
    Default: gp2

  # RDS instance class
  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium

Resources:

  ################################################################
  # Networking (VPC, subnets, IGW) - NAT Gateways intentionally omitted
  ################################################################

  EcsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EcsVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1RouteTable

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2RouteTable

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  ################################################################
  # VPC Endpoints (to avoid NAT for ECS image pulls and S3 access)
  # - S3: Gateway endpoint (for object access and ECR layer downloads)
  # - Interface endpoints: ecr.api, ecr.dkr, sts, logs, secretsmanager
  ################################################################

  S3VpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref EcsVPC
      RouteTableIds:
        - !Ref PublicRouteTable
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      VpcEndpointType: Gateway
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-s3-vpce

  EcrApiEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcId: !Ref EcsVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecr-api-vpce

  EcrDkrEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcId: !Ref EcsVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ecr-dkr-vpce

  StsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.sts
      VpcId: !Ref EcsVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-sts-vpce

  LogsEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId: !Ref EcsVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-logs-vpce

  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcId: !Ref EcsVPC
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VpcEndpointSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-secretsmanager-vpce

  # Security group for interface VPC endpoints (restrict inbound/outbound to internal traffic)
  VpcEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group used by VPC Interface Endpoints
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8   # allow from VPC CIDR (you may tighten)
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-vpce-sg

  ################################################################
  # Security Groups (ALB, ECS, RDS)
  ################################################################
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ALB
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALBSecurityGroup

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS tasks
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECSSecurityGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS PostgreSQL
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RDSSecurityGroup

  ################################################################
  # ECR Repository (reused)
  ################################################################
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-repository
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-repository

  ################################################################
  # OIDC Provider and GitHubActionsRole (unchanged)
  ################################################################
  GitHubOidcProvider:
    Type: AWS::IAM::OIDCProvider
    Properties:
      Url: https://token.actions.githubusercontent.com
      ClientIdList:
        - sts.amazonaws.com
      ThumbprintList:
        - 7560d6f40fa55195f740ee2b1b7c0b4836cbe103
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-GitHubOidcProvider

  GitHubActionsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-GitHubActionsRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Ref GitHubOidcProvider
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringLike:
                token.actions.githubusercontent.com:sub: !Sub repo:${AllowedGithubRepo}:ref:${AllowedGithubBranch}
              StringEquals:
                token.actions.githubusercontent.com:aud: sts.amazonaws.com
      Path: "/"
      Policies:
        - PolicyName: ECRPush
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:DescribeRepositories
                  - ecr:DescribeImages
                  - ecr:GetDownloadUrlForLayer
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:RegisterTaskDefinition
                  - ecs:DescribeTaskDefinition
                  - ecs:DeregisterTaskDefinition
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                Resource: !Sub arn:aws:s3:::${EnvironmentName}-gallery-bucket/*
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource: !Sub arn:aws:s3:::${EnvironmentName}-gallery-bucket
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt ECSTaskExecutionRole.Arn

  ################################################################
  # ECS Task Execution Role (unchanged) and ECS Task Role (new)
  ################################################################
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ExtraECRAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:DescribeRepositories
                  - ecr:ListImages
                Resource: "*"

  # Task role — used by your application container to call AWS SDK (S3, SecretsManager, RDS via credentials)
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: AppS3AndSecretsAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              # Allow reading and writing objects in the gallery bucket
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::${EnvironmentName}-gallery-bucket
                  - !Sub arn:aws:s3:::${EnvironmentName}-gallery-bucket/*
              # Allow reading DB credentials from Secrets Manager
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DBSecret

  ################################################################
  # CloudWatch Log Group
  ################################################################
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-log-group
      RetentionInDays: 5

  ################################################################
  # RDS: subnet group, instance, and a Secrets Manager secret for credentials
  ################################################################
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS PostgreSQL
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      DBSubnetGroupName: !Sub ${EnvironmentName}-db-subnet-group

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${EnvironmentName}-db-secret
      Description: Credentials for RDS PostgreSQL for the Gallery app
      SecretString: !Sub |
        {
          "username": "${DBUsername}",
          "password": "${DBPassword}"
        }

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: gallerydb
      DBInstanceIdentifier: !Sub ${EnvironmentName}-postgres
      AllocatedStorage: 20
      DBInstanceClass: !Ref DBInstanceClass
      Engine: postgres
      EngineVersion: "13.7"
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-postgres

  ################################################################
  # S3 Bucket for images (private) + Bucket Policy restricting access
  ################################################################
  GalleryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-gallery-bucket
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-gallery-bucket

  GalleryBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref GalleryBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow objects access only if request comes via the S3 VPC Endpoint (restricts direct internet)
          - Sid: AllowVPCEndpointAccessOnly
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
              - "s3:DeleteObject"
              - "s3:ListBucket"
            Resource:
              - !Sub arn:aws:s3:::${EnvironmentName}-gallery-bucket
              - !Sub arn:aws:s3:::${EnvironmentName}-gallery-bucket/*
            Condition:
              StringEquals:
                aws:sourceVpce: !Ref S3VpcEndpoint
          # Deny any other access explicitly (helps prevent accidental public access)
          - Sid: DenyNonVPCE
            Effect: Deny
            NotPrincipal:
              AWS: arn:aws:iam::${AWS::AccountId}:root
            Action:
              - "s3:GetObject"
              - "s3:PutObject"
            Resource:
              - !Sub arn:aws:s3:::${EnvironmentName}-gallery-bucket
              - !Sub arn:aws:s3:::${EnvironmentName}-gallery-bucket/*
            Condition:
              StringNotEquals:
                aws:sourceVpce: !Ref S3VpcEndpoint

  ################################################################
  # ECS Cluster, TaskDefinition, Service, ALB, TargetGroups, CodeDeploy, CodePipeline (mostly reused)
  ################################################################
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${EnvironmentName}-task-definition
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-container
          Image: !Sub ${ECRRepository.RepositoryUri}:latest
          PortMappings:
            - ContainerPort: !Ref AppPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${EnvironmentName}-container-log
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:80/ || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 120

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-load-balancer
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-load-balancer

  TargetGroupBlue:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg-blue
      VpcId: !Ref EcsVPC
      Port: !Ref AppPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port

  TargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg-green
      VpcId: !Ref EcsVPC
      Port: !Ref AppPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - TargetGroupBlue
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref AppPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroupBlue

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - TargetGroupBlue
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub ${EnvironmentName}-service
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-container
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref TargetGroupBlue
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-service

  ################################################################
  # CodeDeploy + CodePipeline resources (kept similar to original)
  ################################################################
  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-code-deploy-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeDeployECSAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecs:DescribeTaskSets
                  - ecs:UpdateServicePrimaryTaskSet
                  - ecs:CreateTaskSet
                  - ecs:DeleteTaskSet
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeListeners
                  - elasticloadbalancing:ModifyListener
                  - elasticloadbalancing:DescribeRules
                  - elasticloadbalancing:ModifyRule
                  - lambda:InvokeFunction
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${EnvironmentName}-artifacts
                  - !Sub arn:aws:s3:::${EnvironmentName}-artifacts/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt ECSTaskExecutionRole.Arn

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${EnvironmentName}-application
      ComputePlatform: ECS

  CodeDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - ECSService
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub ${EnvironmentName}-code-deployment-group
      DeploymentConfigName: CodeDeployDefault.ECSAllAtOnce
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      BlueGreenDeploymentConfiguration:
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !Sub ${EnvironmentName}-service
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - TargetGroups:
              - Name: !GetAtt TargetGroupBlue.TargetGroupName
              - Name: !GetAtt TargetGroupGreen.TargetGroupName
            ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListener

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-code-pipeline-service-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodePipelineInlinePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${EnvironmentName}-artifacts
                  - !Sub arn:aws:s3:::${EnvironmentName}-artifacts/*
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:StopDeployment
                  - codedeploy:GetDeploymentConfig
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecs:DescribeServices
                  - ecs:UpdateService
                  - ecs:DescribeTaskDefinition
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt ECSTaskExecutionRole.Arn
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchCheckLayerAvailability
                Resource: !GetAtt ECRRepository.Arn

  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-artifacts
      VersioningConfiguration:
        Status: Enabled
      AccessControl: Private

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${EnvironmentName}-pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: 1
              Configuration:
                S3Bucket: !Ref ArtifactBucket
                S3ObjectKey: !Sub ${DeploymentZipFileName}
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: ECSCodeDeploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: 1
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeploymentGroup
              InputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

  ################################################################
  # Application Auto Scaling (reuse)
  ################################################################
  ApplicationAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-application-auto-scaling-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ApplicationAutoScalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - iam:CreateServiceLinkedRole
                Resource: "*"

  ECSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: !Sub service/${ECSCluster}/${EnvironmentName}-service
      RoleARN: !GetAtt ApplicationAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  CpuScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentName}-CpuScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub http://${LoadBalancer.DNSName}

  GitHubOidcRoleArn:
    Description: Role ARN for GitHub Actions to assume via OIDC to push images
    Value: !GetAtt GitHubActionsRole.Arn

  ECRRepositoryUri:
    Description: ECR repository URI to be included in the GitHub Actions workflow
    Value: !GetAtt ECRRepository.RepositoryUri

  CodePipelineName:
    Description: Name of the CodePipeline
    Value: !Ref CodePipeline

  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster

  ECSServiceName:
    Description: Name of the ECS Service
    Value: !Ref ECSService

  ECSTaskExecutionRoleArn:
    Description: ARN of the ECS Task Execution Role
    Value: !GetAtt ECSTaskExecutionRole.Arn

  ECSContainerName:
    Description: Name of the ECS Container
    Value: !Sub ${EnvironmentName}-container

  EnvironmentName:
    Description: Name of the Environment
    Value: !Ref EnvironmentName

  GalleryBucketName:
    Description: S3 bucket for images
    Value: !Ref GalleryBucket

  RDSInstanceEndpoint:
    Description: RDS Endpoint (host)
    Value: !GetAtt RDSInstance.Endpoint.Address

  DBSecretArn:
    Description: SecretsManager secret ARN containing DB credentials
    Value: !Ref DBSecret
