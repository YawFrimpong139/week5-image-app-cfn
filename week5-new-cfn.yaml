AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for Photo Gallery Application with Secrets Manager for automatic password generation

Parameters:
  EnvironmentName:
    Type: String
    Default: week5-photo-gallery
    Description: Environment name
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR
  PublicSubnet1Cidr:
    Type: String
    Default: 10.0.0.0/24
    Description: Public Subnet 1 CIDR
  PublicSubnet2Cidr:
    Type: String
    Default: 10.0.1.0/24
    Description: Public Subnet 2 CIDR
  PrivateSubnet1Cidr:
    Type: String
    Default: 10.0.2.0/24
    Description: Private Subnet 1 CIDR
  PrivateSubnet2Cidr:
    Type: String
    Default: 10.0.3.0/24
    Description: Private Subnet 2 CIDR
  PrivateSubnet3Cidr:
    Type: String
    Default: 10.0.4.0/24
    Description: Private Subnet 3 CIDR (for RDS)
  PrivateSubnet4Cidr:
    Type: String
    Default: 10.0.5.0/24
    Description: Private Subnet 4 CIDR (for RDS)
  AllowedGithubRepo:
    Type: String
    Default: YawFrimpong139/week5-image-app-cfn
    Description: Allowed Github Repo
  AllowedGithubBranch:
    Type: String
    Default: refs/heads/main
    Description: Allowed Github Branch
  AppPort:
    Type: Number
    Default: 80
    Description: Application Port
  DeploymentZipFileName:
    Type: String
    Default: deployment-files.zip
    Description: Deployment Zip File Name
  DatabaseName:
    Type: String
    Default: gallerydb
    Description: RDS Database Name
  DatabaseUsername:
    Type: String
    Default: gallery_user
    Description: RDS Database Username
  DatabasePort:
    Type: Number
    Default: 5432
    Description: RDS Database Port

Resources:

  # Secrets Manager Secret for RDS with automatic password generation
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DatabaseUsername}", "dbname": "${DatabaseName}", "port": "${DatabasePort}"}'
        GenerateStringKey: "password"
        PasswordLength: 32
        ExcludeCharacters: '"@/\'
        ExcludePunctuation: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-rds-secret
    DeletionPolicy: Retain

  ## NETWORKING (Basic VPC and subnets first)

  EcsVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-IGW

  # IGW Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref EcsVPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PublicSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PublicSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicSubnet2

  # Public Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Public Subnets Route Table Association
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # Private Subnets for ECS
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet2

  # Additional Private Subnets for RDS
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PrivateSubnet3Cidr
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet3

  PrivateSubnet4:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVPC
      CidrBlock: !Ref PrivateSubnet4Cidr
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateSubnet4

  # Private Route Tables for ECS Subnets
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRouteTable2

  # Private Subnets Route Table Association
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  ## BASIC SECURITY GROUPS (Without dependencies first)

  # Basic VPC Endpoint Security Group (minimal configuration)
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for VPC Endpoints
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VpcCidr  # Allow from entire VPC initially
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-VPCEndpointSG

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ALB
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALBSecurityGroup

  # ECS Security Group (basic setup, will be updated later)
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for ECS
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ECSSecurityGroup

  # RDS Security Group (basic setup, will be updated later)
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group for RDS
      VpcId: !Ref EcsVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DatabasePort
          ToPort: !Ref DatabasePort
          CidrIp: !Ref VpcCidr  # Allow from entire VPC initially
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-RDSSecurityGroup

  ## VPC ENDPOINTS (After basic security groups)

  # S3 Gateway Endpoint (no security group dependency)
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub arn:aws:s3:::${EnvironmentName}-photos-${AWS::AccountId}/*
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:ListBucket
            Resource: !Sub arn:aws:s3:::${EnvironmentName}-photos-${AWS::AccountId}

  # Interface endpoints (with security groups)
  ECRApiVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: VPCEndpointSecurityGroup
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.api
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  ECRDkrVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: VPCEndpointSecurityGroup
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ecr.dkr
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  LogsVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: VPCEndpointSecurityGroup
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: VPCEndpointSecurityGroup
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  SSMVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: VPCEndpointSecurityGroup
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  SSMMessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: VPCEndpointSecurityGroup
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  EC2MessagesVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: VPCEndpointSecurityGroup
    Properties:
      VpcId: !Ref EcsVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  ## STORAGE RESOURCES

  PhotoGalleryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${EnvironmentName}-photos-${AWS::AccountId}
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-photos

  PhotoGalleryBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: PhotoGalleryBucket
    Properties:
      Bucket: !Ref PhotoGalleryBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "s3:*"
            Resource:
              - !GetAtt PhotoGalleryBucket.Arn
              - !Sub ${PhotoGalleryBucket.Arn}/*
            Condition:
              StringNotEquals:
                "aws:SourceVpc": !Ref EcsVPC
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource: !Sub ${PhotoGalleryBucket.Arn}/*
          - Effect: Allow
            Principal: "*"
            Action:
              - s3:ListBucket
            Resource: !Ref PhotoGalleryBucket

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS instance
      DBSubnetGroupName: !Sub ${EnvironmentName}-db-subnet-group
      SubnetIds:
        - !Ref PrivateSubnet3
        - !Ref PrivateSubnet4
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-db-subnet-group

  # RDS PostgreSQL Database
  PhotoGalleryDB:
    Type: AWS::RDS::DBInstance
    DependsOn: 
      - RDSSecret
      - DBSubnetGroup
      - RDSSecurityGroup
    Properties:
      DBInstanceIdentifier: !Sub ${EnvironmentName}-db
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: 14.17
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]
      DBName: !Ref DatabaseName
      Port: !Ref DatabasePort
      MultiAZ: false
      PubliclyAccessible: false
      StorageType: gp2
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: 03:00-04:00
      PreferredMaintenanceWindow: sun:04:00-sun:05:00
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-database

  # Secret Target Attachment
  RDSSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DependsOn:
      - RDSSecret
      - PhotoGalleryDB
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref PhotoGalleryDB
      TargetType: AWS::RDS::DBInstance
    DeletionPolicy: Retain

  ## SSM PARAMETER STORE

  DatabaseHostParameter:
    Type: AWS::SSM::Parameter
    DependsOn: PhotoGalleryDB
    Properties:
      Name: !Sub /${EnvironmentName}/database/host
      Type: String
      Value: !GetAtt PhotoGalleryDB.Endpoint.Address
      Description: RDS database host endpoint

  DatabaseNameParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/database/name
      Type: String
      Value: !Ref DatabaseName
      Description: RDS database name

  DatabasePortParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/database/port
      Type: String
      Value: !Ref DatabasePort
      Description: RDS database port

  S3BucketParameter:
    Type: AWS::SSM::Parameter
    DependsOn: PhotoGalleryBucket
    Properties:
      Name: !Sub /${EnvironmentName}/s3/bucket
      Type: String
      Value: !Ref PhotoGalleryBucket
      Description: S3 bucket for photo storage

  EnvironmentParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /${EnvironmentName}/environment
      Type: String
      Value: !Ref EnvironmentName
      Description: Application environment name

  DatabaseSecretArnParameter:
    Type: AWS::SSM::Parameter
    DependsOn: RDSSecret
    Properties:
      Name: !Sub /${EnvironmentName}/database/secret-arn
      Type: String
      Value: !Ref RDSSecret
      Description: ARN of the Secrets Manager secret containing database credentials

  SSMSessionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/ssm/sessions/${EnvironmentName}
      RetentionInDays: 30

  ## ECR INFRASTRUCTURE

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub ${EnvironmentName}-repository
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-repository

  ## IAM ROLES

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ExtraAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-ECSTaskRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: S3RDSAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt PhotoGalleryBucket.Arn
<<<<<<< HEAD
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource:
                  - !Sub "${PhotoGalleryBucket.Arn}/*"
=======
                  - !Sub ${PhotoGalleryBucket.Arn}/*
        
>>>>>>> 707c57978b65bae415e28fc765f2db3d88d8eedf
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Ref RDSSecret
        
        - PolicyName: SSMSessionManagerAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
        
        - PolicyName: SSMParameterStoreAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentName}/*

  ## ECS CLUSTER & SERVICE

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}-cluster
      Configuration:
        ExecuteCommandConfiguration:
          Logging: OVERRIDE
          LogConfiguration:
            CloudWatchLogGroupName: !Ref SSMSessionLogGroup

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${EnvironmentName}-log-group
      RetentionInDays: 5

  # Enhanced Task Definition
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn:
      - ECSTaskRole
      - ECSTaskExecutionRole
      - RDSSecret
      - PhotoGalleryDB
    Properties:
      Family: !Sub ${EnvironmentName}-task-definition
      Cpu: 512
      Memory: 1024
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: !Sub ${EnvironmentName}-container
          Image: !Sub ${ECRRepository.RepositoryUri}:latest
          PortMappings:
            - ContainerPort: !Ref AppPort
          Essential: true
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Sub ${EnvironmentName}-container
          Secrets:
            - Name: DATABASE_PASSWORD
              ValueFrom: !Ref RDSSecret
          Environment:
            - Name: DATABASE_HOST
              Value: !GetAtt PhotoGalleryDB.Endpoint.Address
            - Name: DATABASE_PORT
              Value: !GetAtt PhotoGalleryDB.Endpoint.Port
            - Name: DATABASE_NAME
              Value: !Ref DatabaseName
            - Name: DATABASE_USERNAME
              Value: !Ref DatabaseUsername
            - Name: S3_BUCKET_NAME
              Value: !Ref PhotoGalleryBucket
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ENVIRONMENT_NAME
              Value: !Ref EnvironmentName
          HealthCheck:
            Command:
              - CMD-SHELL
              - "curl -f http://localhost:80/health || exit 1"
            Interval: 30
            Timeout: 5
            Retries: 3

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${EnvironmentName}-lb
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-lb

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-tg
      VpcId: !Ref EcsVPC
      Port: !Ref AppPort
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref AppPort
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
      - PhotoGalleryDB
      - RDSSecretAttachment
      - ECSTaskDefinition
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub ${EnvironmentName}-service
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      EnableExecuteCommand: true
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
      LoadBalancers:
        - ContainerName: !Sub ${EnvironmentName}-container
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref TargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-service

  ## SECURITY GROUP UPDATES (After all resources are created)

  # Update ECS Security Group egress rules
  ECSSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: 
      - ECSSecurityGroup
      - RDSSecurityGroup
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref DatabasePort
      ToPort: !Ref DatabasePort
      DestinationSecurityGroupId: !Ref RDSSecurityGroup
      Description: Allow database access from ECS tasks

  # Update RDS Security Group ingress rules to be more specific
  RDSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - RDSSecurityGroup
      - ECSSecurityGroup
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: !Ref DatabasePort
      ToPort: !Ref DatabasePort
      SourceSecurityGroupId: !Ref ECSSecurityGroup
      Description: Allow database access from ECS tasks

  # Update VPC Endpoint Security Group to be more specific
  VPCEndpointSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn:
      - VPCEndpointSecurityGroup
      - ECSSecurityGroup
    Properties:
      GroupId: !Ref VPCEndpointSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref ECSSecurityGroup
      Description: Allow HTTPS access from ECS tasks

  ## APPLICATION AUTO SCALING

  ApplicationAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${EnvironmentName}-application-auto-scaling-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: ApplicationAutoScalingPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - cloudwatch:DescribeAlarms
                Resource: "*"

  ECSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn:
      - ECSService
    Properties:
      MaxCapacity: 4
      MinCapacity: 2
      ResourceId: !Sub service/${ECSCluster}/${ECSService}
      RoleARN: !GetAtt ApplicationAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  CpuScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: ECSScalableTarget
    Properties:
      PolicyName: !Sub ${EnvironmentName}-CpuScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60

Outputs:
  LoadBalancerURL:
    Description: URL of the load balancer
    Value: !Sub http://${LoadBalancer.DNSName}

  ECRRepositoryUri:
    Description: ECR repository URI
    Value: !GetAtt ECRRepository.RepositoryUri

  PhotoGalleryBucketName:
    Description: S3 Bucket for storing images
    Value: !Ref PhotoGalleryBucket

  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value: !GetAtt PhotoGalleryDB.Endpoint.Address

  DatabasePort:
    Description: RDS Database Port
    Value: !GetAtt PhotoGalleryDB.Endpoint.Port

  RDSSecretArn:
    Description: Secrets Manager ARN for database credentials
    Value: !Ref RDSSecret

  ECSClusterName:
    Description: Name of the ECS Cluster
    Value: !Ref ECSCluster

  ECSServiceName:
    Description: Name of the ECS Service
    Value: !Ref ECSService

  DatabaseConnectionInstructions:
    Description: Instructions for retrieving database credentials
    Value: !Sub |
      Database credentials are securely stored in Secrets Manager.
      Retrieve them using: aws secretsmanager get-secret-value --secret-id ${RDSSecret}
